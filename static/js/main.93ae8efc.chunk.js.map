{"version":3,"sources":["services/moviesApi.jsx","components/Search.jsx","components/MoviesList.jsx","components/MovieItem.jsx","components/App.jsx","index.jsx"],"names":["this","apiKey","baseUrl","imageBaseUrl","fetch","response","json","sessionID","query","page","sessionIDFiled","queryFiled","error","results","width","path","guestSessionID","movieID","rateNumber","body","value","method","headers","JSON","stringify","Search","fetchData","disabled","useState","searchValue","setSearchValue","input","useRef","useEffect","current","focus","debFetchData","useMemo","debounce","className","ref","placeholder","onChange","event","target","MoviesList","children","currentPage","setPage","alertEmpty","React","Children","count","type","message","style","paddingLeft","fontSize","alertError","size","total","defaultProps","MovieItem","data","genres","rate","setRate","rateColor","setRateColor","id","title","posterPath","poster_path","releaseDate","release_date","overview","voteAverage","vote_average","genreIds","genre_ids","Paragraph","Typography","img","src","moviesApi","getImagePath","alt","date","format","Date","genresList","map","genresId","key","cover","bodyStyle","padding","bordered","borderColor","ellipsis","rows","expandable","symbol","defaultValue","rateMovie","allowHalf","App","loading","setLoading","setSessionID","sort","setSort","setData","stateError","setError","setGenres","Promise","resolve","getGenres","then","genresNames","item","Object","prototype","hasOwnProperty","call","rest","reduce","acc","name","useGenres","session","pageNumber","sortType","getRatedListGuestSession","getSearchList","cbFetchData","useCallback","createGuestSession","guest_session_id","window","scrollTo","Content","Layout","TabPane","Tabs","list","movie","centered","onTabClick","tab","spinning","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93ae8efc.chunk.js","sourcesContent":["class MoviesApi {\r\n  constructor() {\r\n    this.apiKey = 'e3cafce94e3a863833765608b4d85428';\r\n    this.baseUrl = 'https://api.themoviedb.org/3';\r\n    this.imageBaseUrl = 'https://image.tmdb.org/t/p';\r\n  }\r\n\r\n  async createGuestSession() {\r\n    const response = await fetch(`${this.baseUrl}/authentication/guest_session/new?api_key=${this.apiKey}`);\r\n    return response.json();\r\n  }\r\n\r\n  async getSearchList(sessionID, query = 'a', page = 1) {\r\n    const sessionIDFiled = sessionID ? `&seisson_id=${sessionID}` : '';\r\n    const queryFiled = query !== '' ? query : 'a';\r\n    // console.log('ID in API:', sessionID, query);\r\n    let response;\r\n    try {\r\n      response = await fetch(\r\n        `${this.baseUrl}/search/movie?api_key=${this.apiKey}${sessionIDFiled}&query=${queryFiled}&page=${page}`\r\n      );\r\n    } catch (error) {\r\n      return {\r\n        error,\r\n        results: [],\r\n      };\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  getImagePath(width, path) {\r\n    const errorImg = 'https://raw.githubusercontent.com/SaniRouke/Images/master/not-found.png';\r\n\r\n    return path !== null ? `${this.imageBaseUrl}/w${width}${path}` : errorImg;\r\n  }\r\n\r\n  async rateMovie(guestSessionID, movieID, rateNumber) {\r\n    const body = {\r\n      value: rateNumber,\r\n    };\r\n    const response = await fetch(\r\n      `${this.baseUrl}/movie/${movieID}/rating?api_key=${this.apiKey}&guest_session_id=${guestSessionID}`,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify(body),\r\n      }\r\n    );\r\n    // console.log('ID in API:', guestSessionID, movieID);\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async getRatedListGuestSession(guestSessionID) {\r\n    let response;\r\n    // console.log('ID in API:', guestSessionID);\r\n    try {\r\n      response = await fetch(`\r\n    ${this.baseUrl}/guest_session/${guestSessionID}/rated/movies?api_key=${this.apiKey}&language=en-US&sort_by=created_at.asc`);\r\n    } catch (error) {\r\n      return {\r\n        error,\r\n        results: [],\r\n      };\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async getGenres() {\r\n    const response = await fetch(`${this.baseUrl}/genre/movie/list?api_key=${this.apiKey}&language=en-US`);\r\n    return response.json();\r\n  }\r\n}\r\n\r\nexport default new MoviesApi();\r\n","import React, { useState, useRef, useEffect, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { debounce } from 'lodash';\r\nimport { Input } from 'antd';\r\n\r\nexport default function Search({ fetchData, disabled }) {\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const input = useRef(null);\r\n\r\n  useEffect(() => {\r\n    input.current.focus();\r\n  });\r\n\r\n  const debFetchData = useMemo(() => debounce(fetchData, 400), [fetchData]);\r\n\r\n  const handleSearchValue = (event) => {\r\n    const { value } = event.target;\r\n    setSearchValue(value);\r\n    debFetchData(value);\r\n  };\r\n\r\n  return (\r\n    <Input\r\n      className=\"Search\"\r\n      ref={input}\r\n      placeholder=\"Type to search...\"\r\n      disabled={disabled}\r\n      value={searchValue}\r\n      onChange={handleSearchValue}\r\n    />\r\n  );\r\n}\r\n\r\nSearch.propTypes = {\r\n  fetchData: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Pagination, Alert } from 'antd';\r\n\r\nexport default function MoviesList({ error, children, className, currentPage, setPage }) {\r\n  const isDataEmpty = React.Children.count(children) > 0;\r\n  const alertEmpty = isDataEmpty ? null : (\r\n    <Alert type=\"info\" message=\"Movies not Found\" style={{ paddingLeft: 50, fontSize: 30 }} />\r\n  );\r\n  const alertError = !error ? null : (\r\n    <Alert type=\"error\" message=\"The Internet may not be available\" style={{ paddingLeft: 50, fontSize: 30 }} />\r\n  );\r\n  return (\r\n    <>\r\n      {alertError || alertEmpty || <ul className={className}>{children}</ul>}\r\n      <Pagination className=\"Pagination\" size=\"small\" total={50} current={currentPage} onChange={setPage} />\r\n    </>\r\n  );\r\n}\r\nMoviesList.defaultProps = {\r\n  error: null,\r\n};\r\n\r\nMoviesList.propTypes = {\r\n  error: PropTypes.oneOfType([PropTypes.string, PropTypes.any]),\r\n  children: PropTypes.arrayOf(PropTypes.element).isRequired,\r\n  className: PropTypes.string.isRequired,\r\n  currentPage: PropTypes.number.isRequired,\r\n  setPage: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Tag, Typography, Rate } from 'antd';\r\nimport { format } from 'date-fns';\r\nimport moviesApi from '../services/moviesApi';\r\n\r\nexport default function MovieItem({ className, data, sessionID, genres }) {\r\n  const [rate, setRate] = useState();\r\n  const [rateColor, setRateColor] = useState('black');\r\n\r\n  const {\r\n    id,\r\n    title,\r\n    poster_path: posterPath,\r\n    release_date: releaseDate,\r\n    overview,\r\n    vote_average: voteAverage,\r\n    genre_ids: genreIds,\r\n  } = data;\r\n  const { Paragraph } = Typography;\r\n\r\n  useEffect(() => {\r\n    if (voteAverage >= 0 && voteAverage < 3) {\r\n      setRateColor('#E90000');\r\n    }\r\n    if (voteAverage >= 3 && voteAverage < 5) {\r\n      setRateColor('#E97E00');\r\n    }\r\n    if (voteAverage >= 5 && voteAverage < 7) {\r\n      setRateColor('#E9D100');\r\n    }\r\n    if (voteAverage >= 7) {\r\n      setRateColor('#66E900');\r\n    }\r\n  }, [voteAverage]);\r\n\r\n  const img = <img src={moviesApi.getImagePath(185, posterPath)} alt={data.title} />;\r\n  const date = releaseDate ? format(new Date(releaseDate), 'MMMM d, yyyy') : '-/-/-';\r\n  const genresList = genreIds.map((genresId) => (\r\n    <Tag className=\"MovieItem__tag\" key={genresId}>\r\n      {genres[genresId]}\r\n    </Tag>\r\n  ));\r\n\r\n  return (\r\n    <Card className={className} cover={img} bodyStyle={{ padding: '10px 20px 40px' }} bordered={false}>\r\n      <div className=\"MovieItem__header\">\r\n        <h3 className=\"MovieItem__title\">{title}</h3>\r\n        <div className=\"MovieItem__rate-circle\" style={{ borderColor: rateColor }}>\r\n          {voteAverage}\r\n        </div>\r\n      </div>\r\n      <p className=\"MovieItem__date\">{date}</p>\r\n      <div className=\"MovieItem__tag-wrapper\">{genres && genreIds ? genresList : null}</div>\r\n      <Paragraph className=\"MovieItem__overview\" ellipsis={{ rows: 5, expandable: true, symbol: 'more' }}>\r\n        {overview}\r\n      </Paragraph>\r\n      <Rate\r\n        className=\"MovieItem__rate-stars\"\r\n        count={10}\r\n        defaultValue={0}\r\n        value={rate}\r\n        onChange={(rateNumber) => {\r\n          setRate(rateNumber);\r\n          moviesApi.rateMovie(sessionID, id, rateNumber);\r\n        }}\r\n        allowHalf\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n\r\nMovieItem.defaultProps = {\r\n  sessionID: null,\r\n  genres: null,\r\n};\r\n\r\nMovieItem.propTypes = {\r\n  className: PropTypes.string.isRequired,\r\n  data: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    title: PropTypes.string,\r\n    poster_path: PropTypes.string,\r\n    release_date: PropTypes.string,\r\n    overview: PropTypes.string,\r\n    vote_average: PropTypes.number,\r\n    genre_ids: PropTypes.arrayOf(PropTypes.number),\r\n  }).isRequired,\r\n  sessionID: PropTypes.string,\r\n  genres: PropTypes.objectOf(PropTypes.string),\r\n};\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Layout, Tabs, Spin } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport './App.css';\r\nimport moviesApi from '../services/moviesApi';\r\nimport Search from './Search';\r\nimport MoviesList from './MoviesList';\r\nimport MovieItem from './MovieItem';\r\n\r\nexport default function App() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [sessionID, setSessionID] = useState(null);\r\n  const [sort, setSort] = useState('search');\r\n  const [data, setData] = useState([]);\r\n  const [stateError, setError] = useState(null);\r\n  const [currentPage, setPage] = useState(1);\r\n  const genres = useGenres();\r\n  const [searchValue, setSearchValue] = useState('');\r\n\r\n  const fetchData = (session, query, pageNumber, sortType = 'search') => {\r\n    setLoading(true);\r\n    setSearchValue(query);\r\n    Promise.resolve(\r\n      sortType === 'rated'\r\n        ? moviesApi.getRatedListGuestSession(session)\r\n        : moviesApi.getSearchList(session, query, pageNumber)\r\n    ).then(({ error, results }) => {\r\n      setLoading(false);\r\n      setData(results);\r\n      setError(error);\r\n      return results;\r\n    });\r\n  };\r\n\r\n  const cbFetchData = useCallback(() => fetchData(sessionID, searchValue, currentPage, sort), [\r\n    sessionID,\r\n    searchValue,\r\n    currentPage,\r\n    sort,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    // console.log('useEffect init');\r\n    Promise.resolve(moviesApi.createGuestSession()).then((session) => {\r\n      setSessionID(session.guest_session_id);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // console.log('useEffect Page');\r\n    cbFetchData();\r\n    window.scrollTo(0, 0);\r\n  }, [currentPage, sort, cbFetchData]);\r\n\r\n  useEffect(() => {\r\n    // обновляет ещё раз страницу, в итоге 3 запроса за раз, заметно\r\n    // console.log('useEffect Change Value');\r\n    setPage(1);\r\n  }, [searchValue]);\r\n\r\n  const { Content } = Layout;\r\n  const { TabPane } = Tabs;\r\n\r\n  const list = data.map((movie) => (\r\n    <li className=\"li-MovieItem\" key={movie.id}>\r\n      <MovieItem className=\"MovieItem\" data={movie} sessionID={sessionID} genres={genres} />\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Layout className=\"Layout\">\r\n        <Content className=\"Content\">\r\n          <Tabs className=\"Tabs\" size=\"large\" centered onTabClick={setSort}>\r\n            <TabPane tab=\"Search\" key=\"search\" />\r\n            <TabPane tab=\"Rated\" key=\"rated\" />\r\n          </Tabs>\r\n          <Search\r\n            fetchData={(query) => {\r\n              return fetchData(sessionID, query, currentPage);\r\n            }}\r\n            disabled={sort === 'rated'}\r\n          />\r\n          <Spin spinning={loading} size=\"large\">\r\n            <MoviesList className=\"MoviesList\" error={stateError} currentPage={currentPage} setPage={setPage}>\r\n              {list}\r\n            </MoviesList>\r\n          </Spin>\r\n        </Content>\r\n      </Layout>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction useGenres() {\r\n  const [genres, setGenres] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // console.log('useGENRES');\r\n    Promise.resolve(moviesApi.getGenres()).then((genresList) => {\r\n      setGenres(genresList.genres);\r\n    });\r\n  }, []);\r\n\r\n  let genresNames = [];\r\n  for (const item in genres) {\r\n    if (Object.prototype.hasOwnProperty.call(genres, item)) {\r\n      const [...rest] = genresNames;\r\n      genresNames = [...rest, genres[item]];\r\n    }\r\n  }\r\n  const genresList = genresNames.reduce((acc, ...item) => {\r\n    return { ...acc, [item[0].id]: item[0].name };\r\n  }, {});\r\n\r\n  return genresList;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}